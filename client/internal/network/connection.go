package network

import (
	"bufio"
	"crypto/tls"
	"crypto/x509"
	"fmt"
	"io/ioutil"
	"log"
	"net"
	"strconv"
	"strings"
	"time"

	"word-of-wisdom-client/internal/config"
)

type DefaultNetworkClient struct {
	cfg       *config.Config
	tlsConfig *tls.Config
}

func NewDefaultNetworkClient(cfg *config.Config) *DefaultNetworkClient {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è TLS
	certPool := x509.NewCertPool()
	serverCert, err := ioutil.ReadFile("certs/server.crt")
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
	certPool.AppendCertsFromPEM(serverCert)

	tlsConfig := &tls.Config{
		RootCAs:    certPool,
		MinVersion: tls.VersionTLS12,
	}

	return &DefaultNetworkClient{
		cfg:       cfg,
		tlsConfig: tlsConfig,
	}
}

func (nc *DefaultNetworkClient) Connect(serverAddr string) (net.Conn, error) {
	log.Printf("üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ %s...", serverAddr)
	conn, err := tls.Dial("tcp", serverAddr, nc.tlsConfig)
	if err != nil {
		return nil, fmt.Errorf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: %v", err)
	}
	log.Printf("‚úÖ TLS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å %s", conn.RemoteAddr())
	return conn, nil
}

func (nc *DefaultNetworkClient) ReceiveChallenge(conn net.Conn) (string, int, error) {
	reader := bufio.NewReader(conn)

	log.Print("üì• –û–∂–∏–¥–∞–Ω–∏–µ challenge –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...")
	challenge, err := readLine(reader)
	if err != nil {
		return "", 0, fmt.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è challenge: %v", err)
	}
	log.Printf("‚úÖ –ü–æ–ª—É—á–µ–Ω challenge: '%s'", challenge)

	log.Print("üì• –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...")
	diffStr, err := readLine(reader)
	if err != nil {
		return "", 0, fmt.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: %v", err)
	}

	difficulty, err := strconv.Atoi(diffStr)
	if err != nil {
		return "", 0, fmt.Errorf("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: %v", err)
	}
	log.Printf("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å: %d", difficulty)

	return challenge, difficulty, nil
}

func (nc *DefaultNetworkClient) SendNonceAndGetQuote(conn net.Conn, nonce string) error {
	log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ nonce='%s' —Å–µ—Ä–≤–µ—Ä—É...", nonce)
	startTime := time.Now()

	if _, err := fmt.Fprintln(conn, nonce); err != nil {
		return fmt.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ nonce: %v", err)
	}

	reader := bufio.NewReader(conn)
	response, err := readLine(reader)
	if err != nil {
		return fmt.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	log.Printf("‚ú® –ü–æ–ª—É—á–µ–Ω–∞ —Ü–∏—Ç–∞—Ç–∞ (–∑–∞ %v):", time.Since(startTime))
	log.Printf("üìú %s", response)
	return nil
}

func readLine(reader *bufio.Reader) (string, error) {
	line, err := reader.ReadString('\n')
	if err != nil {
		return "", err
	}
	return strings.TrimSpace(line), nil
}
