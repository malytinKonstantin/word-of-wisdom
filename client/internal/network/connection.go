package network

import (
	"bufio"
	"crypto/tls"
	"crypto/x509"
	"fmt"
	"io/ioutil"
	"log"
	"net"
	"strconv"
	"strings"
	"time"

	"word-of-wisdom-client/internal/config"
)

// ConnectToServer —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É
func ConnectToServer(cfg *config.Config) (*tls.Conn, error) {
	log.Printf("üîí –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏
	certPool := x509.NewCertPool()
	serverCert, err := ioutil.ReadFile("certs/server.crt")
	if err != nil {
		return nil, fmt.Errorf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
	certPool.AppendCertsFromPEM(serverCert)
	log.Printf("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	tlsConfig := &tls.Config{
		RootCAs:    certPool,         // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–µ—Ä–≤–µ—Ä–∞
		MinVersion: tls.VersionTLS12, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º—É–º TLS –≤–µ—Ä—Å–∏–∏ 1.2
	}

	log.Printf("üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ %s...", cfg.ServerAddr)
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
	conn, err := tls.Dial("tcp", cfg.ServerAddr, tlsConfig)
	if err != nil {
		return nil, fmt.Errorf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: %v", err)
	}
	log.Printf("‚úÖ TLS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å %s", conn.RemoteAddr())
	return conn, nil
}

// ReceiveChallenge –ø–æ–ª—É—á–∞–µ—Ç challenge –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è PoW –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
func ReceiveChallenge(conn net.Conn) (string, int, error) {
	reader := bufio.NewReader(conn)

	log.Print("üì• –û–∂–∏–¥–∞–Ω–∏–µ challenge –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...")
	challenge, err := ReadLine(reader)
	if err != nil {
		return "", 0, fmt.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è challenge: %v", err)
	}
	log.Printf("‚úÖ –ü–æ–ª—É—á–µ–Ω challenge: '%s'", challenge)

	log.Print("üì• –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...")
	diffStr, err := ReadLine(reader)
	if err != nil {
		return "", 0, fmt.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: %v", err)
	}

	difficulty, err := strconv.Atoi(diffStr)
	if err != nil {
		return "", 0, fmt.Errorf("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: %v", err)
	}
	log.Printf("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å: %d", difficulty)

	return challenge, difficulty, nil
}

// SendNonceAndGetQuote –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π nonce —Å–µ—Ä–≤–µ—Ä—É –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ü–∏—Ç–∞—Ç—É
func SendNonceAndGetQuote(conn net.Conn, nonce string) error {
	log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ nonce='%s' —Å–µ—Ä–≤–µ—Ä—É...", nonce)
	startTime := time.Now()

	if _, err := fmt.Fprintln(conn, nonce); err != nil {
		return fmt.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ nonce: %v", err)
	}

	reader := bufio.NewReader(conn)
	response, err := ReadLine(reader)
	if err != nil {
		return fmt.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	log.Printf("‚ú® –ü–æ–ª—É—á–µ–Ω–∞ —Ü–∏—Ç–∞—Ç–∞ (–∑–∞ %v):", time.Since(startTime))
	log.Printf("üìú %s", response)
	return nil
}

func ReadLine(reader *bufio.Reader) (string, error) {
	line, err := reader.ReadString('\n')
	if err != nil {
		return "", err
	}
	return strings.TrimSpace(line), nil
}
