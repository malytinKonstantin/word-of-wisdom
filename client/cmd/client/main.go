package main

import (
	"context"
	"log"
	"os"
	"time"

	"word-of-wisdom-client/internal/config"
	"word-of-wisdom-client/internal/interfaces"
	"word-of-wisdom-client/internal/network"
	"word-of-wisdom-client/internal/pow"
)

func init() {
	log.SetFlags(log.Ldate | log.Ltime | log.Lmicroseconds)
	log.SetOutput(os.Stdout)
}

func main() {
	cfg := config.NewDefault()
	log.Printf("–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞=%s, —Ç–∞–π–º–∞—É—Ç=%v",
		cfg.ServerAddr, cfg.Timeout)

	var netClient interfaces.NetworkClient = network.NewDefaultNetworkClient(cfg)
	var powSolver interfaces.PoWSolver = pow.NewDefaultPoWSolver()

	startTime := time.Now()
	conn, err := netClient.Connect(cfg.ServerAddr)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: %v", err)
	}
	defer conn.Close()
	log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É %s (–∑–∞–Ω—è–ª–æ %v)",
		cfg.ServerAddr, time.Since(startTime))

	challenge, difficulty, err := netClient.ReceiveChallenge(conn)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è challenge: %v", err)
	}
	log.Printf("üì• –ü–æ–ª—É—á–µ–Ω challenge='%s' –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å=%d", challenge, difficulty)

	powStartTime := time.Now()
	log.Printf("‚öôÔ∏è –ù–∞—á–∞–ª–æ —Ä–µ—à–µ–Ω–∏—è Proof of Work...")

	ctx, cancel := context.WithTimeout(context.Background(), cfg.Timeout)
	defer cancel()

	nonce, err := powSolver.SolveProofOfWork(ctx, challenge, difficulty)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ Proof of Work: %v", err)
	}

	log.Printf("‚úÖ Proof of Work —Ä–µ—à–µ–Ω –∑–∞ %v, –Ω–∞–π–¥–µ–Ω–Ω—ã–π nonce='%s'",
		time.Since(powStartTime), nonce)

	if err := netClient.SendNonceAndGetQuote(conn, nonce); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º: %v", err)
	}
	log.Printf("‚ú® –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞: %v", time.Since(startTime))
}
